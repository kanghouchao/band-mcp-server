name: Publish

on:
  push:
    tags:
      - 'v*.*.*'
    paths-ignore:
      - '**.md'
      - '**.txt'
      - 'docs/**'
      - 'LICENSE'
      - '.gitignore'
  workflow_dispatch: {}

permissions:
    contents: read

jobs:
  # Read package metadata once so multiple jobs can reuse it
  get-package-meta:
    runs-on: ubuntu-latest
    outputs:
      pkg_name: ${{ steps.read.outputs.pkg_name }}
      pkg_version: ${{ steps.read.outputs.pkg_version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Read package.json
        id: read
        run: |
          echo "Reading package.json"
          PKG_NAME=$(jq -r .name package.json)
          PKG_VERSION=$(jq -r .version package.json)
          echo "pkg_name=$PKG_NAME" >> $GITHUB_OUTPUT
          echo "pkg_version=$PKG_VERSION" >> $GITHUB_OUTPUT

  # NPM publish job: run only for semver-like tags (vX.Y.Z or other tags containing a dot)
  publish-npm:
    needs: get-package-meta
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm install

      - name: Build
        run: npm run build

      - name: Run tests
        run: npm test

      - name: Publish package
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          PKG_NAME: ${{ needs.get-package-meta.outputs.pkg_name }}
          PKG_VERSION: ${{ needs.get-package-meta.outputs.pkg_version }}
        run: |
          echo "Publishing package to npm..."
          if [[ "$PKG_VERSION" == *"snapshot"* ]]; then
            SNAP_VERSION="${PKG_VERSION}.${RUN_ID}+${GIT_SHA:0:7}"
            echo "Detected snapshot version, final publish version: $SNAP_VERSION"
            npm version --no-git-tag-version "$SNAP_VERSION"
            npm publish --tag snapshot --access public
          else
            npm publish --access public
            echo "Tagging published package as 'latest'"
            echo "Adding dist-tag: $PKG_NAME@$PKG_VERSION -> latest"
            npm dist-tag add "$PKG_NAME@$PKG_VERSION" latest
          fi

  # Docker: build-and-push on any v* tag (includes vX or vX.Y.Z)
  publish-docker:
    needs: get-package-meta
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: "kanghouchao"
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Compute docker tags
        id: docker_tags
        run: |
          VERSION=${{ needs.get-package-meta.outputs.pkg_version }}
          echo "Generating tags for VERSION=$VERSION"
          echo "tag_lines<<EOF" >> $GITHUB_OUTPUT
          echo "type=raw,value=$VERSION" >> $GITHUB_OUTPUT
          if [[ "$VERSION" != *"snapshot"* ]]; then
            echo "type=raw,value=latest" >> $GITHUB_OUTPUT
          fi
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: kanghouchao/band-mcp-server
          tags: |
            ${{ steps.docker_tags.outputs.tag_lines }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max
          target: production

      - name: Update Docker Hub description
        uses: peter-evans/dockerhub-description@v4.0.2
        with:
          username: "kanghouchao"
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
          repository: kanghouchao/band-mcp-server
          readme-filepath: ./DOCKER_README.md
